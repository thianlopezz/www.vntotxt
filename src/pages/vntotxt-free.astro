---
import Layout from "../layouts/Layout.astro";
import CardSubscription from "../components/CardSubscription.astro";
import { getLangFromUrl, useTranslations } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Layout language="en" title="VnToTxt Free Plan">
  <section class="md:flex md:h-screen">
    <main class="flex-col w-full pt-5 pb-10 md:w-1/2">
      <div class="px-10 py-5 text-sm breadcrumbs">
        <ul>
          <li><a href={`${lang == "es" ? "/es" : "/"}`}>Home</a></li>
          <li>VnToTxt Free</li>
        </ul>
      </div>
      <div class="flex justify-center py-5">
        <CardSubscription
          title={t("plan.free.title")}
          price="0"
          features={[
            {
              description: t("plan.free.feature.transcriptions"),
              included: true,
            },
            {
              description: t("plan.feature.quota.same"),
              included: true,
            },
            { description: t("plan.feature.multilanguage"), included: true },
            {
              description: t("plan.feature.support.basic"),
              included: true,
            },
            {
              description: t("plan.feature.processing.standard"),
              included: true,
            },
            {
              description: t("plan.feature.webapp"),
              included: false,
            },
          ]}
        />
      </div>
    </main>
    <div
      class="flex-col justify-center py-6 px-4 md:px-20 md:flex md:w-1/2 bg-secondary"
    >
      <div class="my-20 md:my-0 mx-auto w-full sm:w-4/5 md:max-w-xs">
        <div class="alert alert-info mb-4 text-base-100" style="display: none;">
          <i class="bx bx-info-circle"></i>
          <span></span>
        </div>
        <div
          class="alert alert-error mb-4 text-base-100"
          style="display: none;"
        >
          <i class="bx bxs-error-circle"></i>
          <span></span>
        </div>
        <h1 class="text-3xl font-ubuntu">{t("checkout.verification.title")}</h1>
        <p class="mb-6">
          {t("checkout.verification.description")}
        </p>
        <form
          id="verifyWaForm"
          onsubmit="sendVerificationCodeProcess(event)"
          class="w-full mx-auto md:max-w-xs"
        >
          <label class="form-control w-full md:max-w-xs">
            <div class="label">
              <span class="label-text"
                >{t("checkout.verification.wanumber")}</span
              >
              <!-- <span class="label-text-alt">Top Right label</span> -->
            </div>
            <input
              id="phone"
              type="tel"
              name="phone"
              class="input input-bordered w-full md:max-w-xs"
              required
            />
            <div class="label">
              <span class="label-text-alt"
                >{t("checkout.verification.wanumber.helper")}</span
              >
              <!-- <span class="label-text-alt">Bottom Right label</span> -->
            </div>
          </label>
          <div id="divWaVerifyButton" class="flex w-full">
            <button type="submit" class="btn btn-primary mt-2 btn-block mx-auto"
              >{t("checkout.verification.send")}
              <span
                style="display: none"
                id="loadingSendVerificationCode"
                class="loading loading-spinner"></span>
            </button>
          </div>
        </form>
        <!-- style="display: none" -->
        <form
          style="display: none"
          id="verifyCodeForm"
          onsubmit="verificationCodeProcess(event)"
          class="mx-auto"
        >
          <input
            id="subscriptionRequestIdInput"
            type="hidden"
            name="subscriptionRequestId"
          />
          <label class="form-control w-full md:max-w-xs">
            <div class="label">
              <span class="label-text">{t("checkout.verification.code")}</span>
              <!-- <span class="label-text-alt">Top Right label</span> -->
            </div>
            <input
              id="verificationCodeInput"
              type="text"
              name="verificationCode"
              class="input input-borderedw-full md:max-w-xs"
              required
            />
            <div class="label">
              <span class="label-text-alt"
                >{t("checkout.verification.code.enter")}</span
              >
              <!-- <span class="label-text-alt">Bottom Right label</span> -->
            </div>
          </label>
          <div class="flex w-full">
            <button type="submit" class="btn btn-primary mt-2 btn-block mx-auto"
              >{t("checkout.verification.subscribe")}
              <span
                style="display: none"
                id="loadingVerification"
                class="loading loading-spinner"></span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </section>
</Layout>

<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"
></script>
<script is:inline>
  const VNTOTXT_API = "https://api.vntotxt.com";
  // const VNTOTXT_API =
  //   "https://super-barnacle-pjw6wp6qwjjfrxqx-3000.app.github.dev";

  const verifyWaForm = document.querySelector("#verifyWaForm");
  const verifyCodeForm = document.querySelector("#verifyCodeForm");
  const divWaVerifyButton = document.querySelector("#divWaVerifyButton");
  const subscriptionRequestIdInput = document.querySelector(
    "#subscriptionRequestIdInput"
  );

  const loadingSendVerificationCode = document.querySelector(
    "#loadingSendVerificationCode"
  );

  const loadingVerification = document.querySelector("#loadingVerification");

  const phoneInputField = document.querySelector("#phone");
  const phoneInput = window.intlTelInput(phoneInputField, {
    initialCountry: "auto",
    geoIpLookup: getIp,
    utilsScript:
      "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js",
  });

  // getIp(console.log);

  const info = document.querySelector(".alert-info");
  const error = document.querySelector(".alert-error");

  const infoText = document.querySelector(".alert-info span");
  const errorText = document.querySelector(".alert-error span");

  async function sendVerificationCodeProcess(event) {
    event.preventDefault();

    const phoneNumber = phoneInput.getNumber();

    info.style.display = "none";
    error.style.display = "none";

    if (phoneInput.isValidNumber()) {
      waId = phoneNumber.replace("+", "");

      loadingSendVerificationCode.style.display = "";
      phoneInputField.disabled = true;

      try {
        let response = await fetch(VNTOTXT_API + "/v1/request-subscription", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            waId,
            tierId: 1,
          }),
        });

        if (response.ok) {
          response = await response.json();
          const { success, data, message } = response;
          if (success) {
            divWaVerifyButton.style.display = "none";
            verifyCodeForm.style.display = "";
            subscriptionRequestIdInput.value = data.subscriptionRequestId;
          } else {
            phoneInputField.disabled = false;
            error.style.display = "";
            errorText.innerHTML = message;
          }
        } else {
          phoneInputField.disabled = false;
          error.style.display = "";
          errorText.innerHTML = `There was an error validating the phone number. Please try again.`;
        }
      } catch (error) {
        phoneInputField.disabled = false;
        error.style.display = "";
        errorText.innerHTML = `There was an error validating the phone number. Please try again.`;
        loadingSendVerificationCode.style.display = "none";
        console.error(error);
      }

      loadingSendVerificationCode.style.display = "none";
    } else {
      error.style.display = "";
      errorText.innerHTML = `Invalid phone number.`;
    }
  }

  async function verificationCodeProcess(event) {
    event.preventDefault();

    const verificationCode = document.querySelector(
      "#verificationCodeInput"
    ).value;
    const subscriptionRequestId = subscriptionRequestIdInput.value;

    info.style.display = "none";
    error.style.display = "none";

    loadingVerification.style.display = "";

    try {
      let response = await fetch(VNTOTXT_API + "/v1/verify-request", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          subscriptionRequestId,
          pin: verificationCode,
        }),
      });

      if (response.ok) {
        response = await response.json();
        const { success, data, message } = response;
        if (success) {
          phoneInputField.disabled = true;
          window.location.href =
            "/subscription-success/?subscriptionId=" + data.subscriptionId;
        } else {
          error.style.display = "";
          errorText.innerHTML = message;
        }
      } else {
        error.style.display = "";
        errorText.innerHTML = `There was an error validating the phone number. Please try again.`;
      }
    } catch (error) {
      error.style.display = "";
      errorText.innerHTML = `There was an error validating the phone number. Please try again.`;
      loadingVerification.style.display = "none";
      console.error(error);
    }

    loadingVerification.style.display = "none";
  }

  function getIp(callback) {
    fetch("https://ipinfo.io/json?token=f59435832cc609")
      .then((resp) => resp.json())
      .catch((e) => {
        debugger;
        console.warn("Fail to get ipinfo", e.message);
        return {
          country: "us",
        };
      })
      .then((resp) => {
        debugger;
        callback(resp.country);
      });
  }
</script>
